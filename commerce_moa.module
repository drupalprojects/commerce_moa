<?php

/**
 * Implements hook_menu().
 */
function commerce_moa_menu() {
  $items = array();

  $items['admin/commerce/config/moa'] = array(
    'title' => 'Minimum & Maximum Order Amount',
    'description' => 'Configure the default minimum & maximum order amount value.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_moa_settings_form'),
    'access arguments' => array('configure store'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Builds the minimum order amount settings form.
 */
function commerce_moa_settings_form($form, &$form_state) {
  $form = array();

  $form['commerce_minimum_order_amount'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#title' => t('Minimum Order Amount'),
    '#description' => t('The default minimum order amount. Ex: 11.99 if set 0 then dislable'),
    '#default_value' => commerce_moa_default_minimum(),
    '#field_suffix' => commerce_default_currency(),
  );
  $form['commerce_maximum_order_amount'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#title' => t('Maximum Order Amount'),
    '#description' => t('The default maximum order amount. Ex: 11.99 if set 0 then dislable'),
    '#default_value' => commerce_moa_default_maximum(),
    '#field_suffix' => commerce_default_currency(),
  );
  $form['#validate'] = array('commerce_moa_settings_form_validate');

  return system_settings_form($form);
}

/**
 * Validate the settings form
 */
function commerce_moa_settings_form_validate($form, &$form_state) {
  $maximum_value = (float) $form_state['values']['commerce_maximum_order_amount'];
  $minimum_value = (float) $form_state['values']['commerce_minimum_order_amount'];
  if (($maximum_value > 0 && $minimum_value > 0) && ($maximum_value < $minimum_value)) {
    form_set_error('moa', t('The maximum value is greater than minimum value.'));
  }
}

/**
 * Return default minimum order amount value, if set is 0 then disable
 */
function commerce_moa_default_minimum() {
  return variable_get('commerce_minimum_order_amount', 0);
}

/**
 * Return default maximum order amount value, if set is 0 then disable
 */
function commerce_moa_default_maximum() {
  return variable_get('commerce_maximum_order_amount', 0);
}

/**
 * Implements hook_form_alter().
 */
function commerce_moa_form_alter(&$form, &$form_state, $form_id) {
  $minimum_value = (float) commerce_moa_default_minimum();
  $maximum_value = (float) commerce_moa_default_maximum();

  if ($minimum_value > 0 || $maximum_value > 0) {
    if (strpos($form_id, 'views_form_commerce_cart_form_') === 0) {
      $form['actions']['checkout']['#validate'] = array_merge($form['#validate'], array('commerce_moa_line_item_views_form_validate'));
    }
  }
}

/**
 * The validate when the checkout button click
 */
function commerce_moa_line_item_views_form_validate($form, &$form_state) {
  $order = commerce_order_load($form_state['order']->order_id);
  $balance = commerce_payment_order_balance($order);
  $total = commerce_currency_amount_to_decimal($balance['amount'], $balance['currency_code']);
  $minimum_value = (float) commerce_moa_default_minimum();
  $maximum_value = (float) commerce_moa_default_maximum();

  if ($minimum_value > 0 && $total < $minimum_value) {
    form_set_error('order', t('This store requires minimum order of %minimum_amount %currency_code.', array('%minimum_amount' => $minimum_value, '%currency_code' => $balance['currency_code'])));
  }
  if ($maximum_value > 0 && $total > $maximum_value) {
    form_set_error('order', t('This store requires maximum order of %maximum_amount %currency_code.', array('%maximum_amount' => $maximum_value, '%currency_code' => $balance['currency_code'])));
  }
}

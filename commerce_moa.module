<?php
/**
 * @file
 * Store the logic of Commerce MOA module.
 *
 * LiFe modified: values per role.
 */

/**
 * Implements hook_menu().
 */
function commerce_moa_menu() {
  $items = [];

  $items['admin/commerce/config/moa'] = [
    'title'            => 'Minimum & Maximum Order Amount Per Role',
    'description'      => 'Configure the default minimum & maximum order amount value per role.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => ['commerce_moa_settings_form'],
    'access arguments' => ['configure store'],
    'type'             => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_moa_permission() {
  $permissions = [
    'access maximum'  => [
      'title'       => t('Access maximum'),
      'description' => t('Access maximum order amount when checkout.'),
    ],
    'access minimum'  => [
      'title'       => t('Access minimum'),
      'description' => t('Access minimum order amount when checkout.'),
    ],
    'access quantity' => [
      'title'       => t('Access quantity'),
      'description' => t('Access order quantity when checkout.'),
    ],
  ];

  return $permissions;
}

/**
 * Builds the minimum order amount settings form.
 */
function commerce_moa_settings_form($form, &$form_state) {
  $form = [];

  $form['commerce_moa_roles_precedence'] = [
    '#type'          => 'textfield',
    '#size'          => 255,
    '#title'         => t('Roles precedence'),
    '#description'   =>
      t('Fill in role names, separated by comma. If user has more roles, the amounts of the first found role in this list are applied.  Available roles<i>: '
        . _moa_roles_string() . '</i>'),
    '#default_value' => variable_get('commerce_moa_roles_precedence', _moa_roles_string()),
  ];

  $form['note'] = [
    '#markup' => '<label>' . t('Minimum and maximum order amount, miminum order quantity and other settings per role') . '</label>',
  ];

  $moa_roles = commerce_moa_roles();

  foreach ($moa_roles as $role) {

    $role_name = str_replace(' ', '_', $role);

    $form[$role_name] = [
      '#type'        => 'fieldset',
      '#title'       => t('Role:') . $role,
      '#collapsible' => TRUE,
      '#collapsed'   => TRUE,
    ];

    $form[$role_name]['commerce_minimum_order_amount_' . $role_name] = [
      '#type'          => 'textfield',
      '#size'          => 15,
      '#title'         => t('Minimum Order Amount') . ' - ' . $role,
      '#description'   => t('The default minimum order amount. Ex: 11.99 if set 0 then disable'),
      '#default_value' => commerce_moa_default_minimum($role_name),
      '#field_suffix'  => commerce_default_currency(),
    ];
    $form[$role_name]['commerce_maximum_order_amount_' . $role_name] = [
      '#type'          => 'textfield',
      '#size'          => 15,
      '#title'         => t('Maximum Order Amount') . ' - ' . $role,
      '#description'   => t('The default maximum order amount. Ex: 11.99 if set 0 then disable'),
      '#default_value' => commerce_moa_default_maximum($role_name),
      '#field_suffix'  => commerce_default_currency(),
    ];
    $form[$role_name]['commerce_minimum_order_quantity_' . $role_name] = [
      '#type'          => 'textfield',
      '#size'          => 15,
      '#title'         => t('Minimum Order Quantity') . ' - ' . $role,
      '#description'   => t('The default minimum order quantity. Ex: 2 if set 0 then disable'),
      '#default_value' => commerce_moa_default_quantity($role_name),
    ];
    $form[$role_name]['commerce_minimum_currency_format_' . $role_name] = [
      '#type'          => 'checkbox',
      '#title'         => t('Currency format') . ' - ' . $role,
      '#description'   => t('The default currency format if checked: !checked, unchecked: !unchecked', [
        '!checked'   => commerce_moa_format_amount(10, commerce_default_currency(), TRUE),
        '!unchecked' => commerce_moa_format_amount(10, commerce_default_currency(), FALSE),
      ]),
      '#default_value' => commerce_moa_currency_format($role_name),
    ];
    $form[$role_name]['commerce_moa_disable_button_on_invalid_' . $role_name] = [
      '#type'          => 'checkbox',
      '#title'         => t('Disabled checkout/continue buttons on invalid orders') . ' - ' . $role,
      '#description'   => t('If an order does not meet the above criteria, a warning
      message will be displayed and the checkout/continue button disabled.'),
      '#default_value' => commerce_moa_disable_button_on_invalid($role_name),
    ];
  }

  $form['#validate'] = ['commerce_moa_settings_form_validate'];

  return system_settings_form($form);
}

/**
 * Validate the settings form.
 */
function commerce_moa_settings_form_validate($form, &$form_state) {
  $roles_precedence = $form_state['values']['commerce_moa_roles_precedence'];
  $roles = explode(',', $roles_precedence);
  $invalid_roles = '';
  foreach ($roles as $role) {
    if (!user_role_load_by_name($role)) {
      $invalid_roles .= $role . ',';
    }
  }
  if (!empty($invalid_roles)) {
    form_set_error('commerce_moa_roles_precedence', t('These roles are invalid: ') . $invalid_roles);
  }
  // We require all possible roles to be in the precedence list.
  $moa_roles = commerce_moa_roles();
  $diff = array_diff($moa_roles, $roles);
  if (!empty($diff)) {
    $missing_roles = '';
    foreach ($diff as $role) {
      $missing_roles .= $role . ',';
    }
    form_set_error('commerce_moa_roles_precedence', t('These roles are missing: ') . $missing_roles);
  }

  $moa_roles = commerce_moa_roles();

  foreach ($moa_roles as $role) {

    $role_name = str_replace(' ', '_', $role);

    $maximum_value = (float) $form_state['values']['commerce_maximum_order_amount_' . $role_name];
    $minimum_value = (float) $form_state['values']['commerce_minimum_order_amount_' . $role_name];
    $minimum_quantity = (float) $form_state['values']['commerce_minimum_order_quantity_' . $role_name];

    if (($maximum_value > 0 && $minimum_value > 0) && ($maximum_value < $minimum_value)) {
      form_set_error($role_name, t('Role:') . " $role. "
        . t('The maximum value is greater than minimum value.'));
    }
    if ($minimum_quantity < 0) {
      form_set_error($role_name, t('Role:') . " $role. "
        . t('The minimum order quantity cannot be less than zero.'));
    }
  }
}

/**
 * Returns applicable role name for current user.
 */
function commerce_moa_role_name() {
  global $user;
  $moa_roles_string = _moa_roles_string();
  $user_roles = $user->roles;
  $roles_precedence = variable_get('commerce_moa_roles_precedence', $moa_roles_string);
  $roles = explode(',', $roles_precedence);
  foreach ($roles as $role_name) {
    if (in_array($role_name, $user_roles)) {
      return str_replace(' ', '_', $role_name);
    }
  }

  // No available role found. No minimum/maximum will be applied.
  return FALSE;
}

/**
 * Returns array of roles, that will have own "moa" data.
 */
function commerce_moa_roles() {
  // Eventually exlude some roles, e.g. 'authenticated user' or 'anonymous user'
  $exclude = ['authenticated user'];
  $result = [];
  $roles = user_roles();

  foreach ($roles as $rid => $role) {
    $role_object = user_role_load($rid);
    $result[] = $role_object->name;
  }
  $result = array_diff($result, $exclude);

  return $result;
}

/**
 * Returns string of role names.
 */
function _moa_roles_string() {
  $roles = commerce_moa_roles();
  $result = '';
  foreach ($roles as $role) {
    $result .= $role . ',';
  }
  $result = substr($result, 0, -1);

  return $result;
}

/**
 * Return default minimum order amount value, if set is 0 then disable.
 */
function commerce_moa_default_minimum($role_name) {
  return variable_get('commerce_minimum_order_amount_' . $role_name, 0);
}

/**
 * Return default maximum order amount value, if set is 0 then disable.
 */
function commerce_moa_default_maximum($role_name) {
  return variable_get('commerce_maximum_order_amount_' . $role_name, 0);
}

/**
 * Return default maximum order amount value, if set is 0 then disable.
 */
function commerce_moa_default_quantity($role_name) {
  return variable_get('commerce_minimum_order_quantity_' . $role_name, 0);
}

/**
 * Return default maximum order amount value, if set is 0 then disable.
 */
function commerce_moa_currency_format($role_name) {
  return variable_get('commerce_minimum_currency_format_' . $role_name, 1);
}

/**
 * Returns disabled checkout/continue button setting.
 */
function commerce_moa_disable_button_on_invalid($role_name) {
  return variable_get('commerce_moa_disable_button_on_invalid_' . $role_name, 1);
}

/**
 * Implements hook_form_alter().
 */
function commerce_moa_form_alter(&$form, &$form_state, $form_id) {
  $role_name = commerce_moa_role_name();
  $minimum_value = (float) commerce_moa_default_minimum($role_name);
  $maximum_value = (float) commerce_moa_default_maximum($role_name);
  $minimum_quantity = commerce_moa_default_quantity($role_name);

  if ($minimum_value > 0 || $maximum_value > 0 || $minimum_quantity > 0) {
    if ($form_id == 'views_form_commerce_cart_form_default') {
      $form['actions']['checkout']['#validate'][] = 'commerce_moa_checkout_form_validate';

      if (commerce_moa_disable_button_on_invalid($role_name)) {
        $valid = commerce_moa_is_valid_order($form_state['order']);
        if (!$valid) {
          $form['actions']['checkout']['#attributes']['disabled'] = TRUE;
        }
      }
    }
    elseif ($form_id == 'commerce_checkout_form_checkout') {
      $form['buttons']['continue']['#validate'][] = 'commerce_moa_checkout_form_validate';

      if (commerce_moa_disable_button_on_invalid($role_name)) {
        $valid = commerce_moa_is_valid_order($form_state['order']);
        if (!$valid) {
          $form['buttons']['continue']['#attributes']['disabled'] = TRUE;
        }
      }
    }
    elseif ($form_id == 'commerce_checkout_form_review') {
      $form['buttons']['continue']['#validate'][] = 'commerce_moa_checkout_form_validate';

      if (commerce_moa_disable_button_on_invalid($role_name)) {
        $valid = commerce_moa_is_valid_order($form_state['order']);
        if (!$valid) {
          $form['buttons']['continue']['#attributes']['disabled'] = TRUE;
        }
      }
    }
  }
}

/**
 * Check if an order is valid in terms of minimum and maximum settings.
 *
 * This will return FALSE on the first invalidity it finds, in the order of
 * quantity, minimum order amount and then maximum order amount.
 *
 * @param \stdClass $order
 *   Commerce order to validate.
 *
 * @param bool      $set_warning
 *   If TRUE, a warning message will be set if the order is considered invalid.
 *   This gives users more information about why the checkout/continue button
 *   is disabled (e.g. Their order is less than the minimum).
 *
 * @return bool
 *   FALSE if the order does not meet one of the set criteria (min quantity,
 *   min order amount or max order amount), TRUE otherwise.
 */
function commerce_moa_is_valid_order($order, $set_warning = TRUE) {
  $role_name = commerce_moa_role_name();
  $balance = $order->commerce_order_total[LANGUAGE_NONE][0];
  $total = commerce_currency_amount_to_decimal($balance['amount'], $balance['currency_code']);
  $minimum_quantity = commerce_moa_default_quantity($role_name);
  $minimum_value = (float) commerce_moa_default_minimum($role_name);
  $maximum_value = (float) commerce_moa_default_maximum($role_name);

  $use_custom_currency_format = commerce_moa_currency_format($role_name);
  $minimum_value_error = commerce_moa_format_amount($minimum_value, $balance['currency_code'], $use_custom_currency_format);
  $maximum_value_error = commerce_moa_format_amount($maximum_value, $balance['currency_code'], $use_custom_currency_format);

  // Check access quantity.
  if (user_access('access quantity')) {
    if ($minimum_quantity > 0) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      $order_wrapper->commerce_line_items;
      foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
        // Don't check quantity for shipping line item.
        $is_product = in_array($line_item_wrapper->type->value(), commerce_product_line_item_types());
        if ($is_product && intval($line_item_wrapper->quantity->value()) < $minimum_quantity) {
          if ($set_warning) {
            $warning = t('This store requires minimum quantity order of
            !minimum_quantity per item.',
              ['!minimum_quantity' => $minimum_quantity]);
            drupal_set_message($warning, 'warning', FALSE);
          }

          return FALSE;
        }
      }
    }
  }
  // Check access minimum.
  if (user_access('access minimum')) {
    if ($minimum_value > 0 && $total < $minimum_value) {
      if ($set_warning) {
        $warning = t('This store requires minimum order of !minimum_amount.',
          ['!minimum_amount' => $minimum_value_error]);
        drupal_set_message($warning, 'warning', FALSE);
      }

      return FALSE;
    }
  }
  // Check access maximum.
  if (user_access('access maximum')) {
    if ($maximum_value > 0 && $total > $maximum_value) {
      if ($set_warning) {
        $warning = t('This store requires maximum order of !maximum_amount.',
          ['!maximum_amount' => $maximum_value_error]);
        drupal_set_message($warning, 'warning', FALSE);
      }

      return FALSE;
    }
  }

  return TRUE;
}

/**
 * The validate when direct access to checkout page.
 */
function commerce_moa_checkout_form_validate($form, &$form_state) {
  $role_name = commerce_moa_role_name();
  $order = commerce_order_load($form_state['order']->order_id);
  $balance = $order->commerce_order_total[LANGUAGE_NONE][0];
  $total = commerce_currency_amount_to_decimal($balance['amount'], $balance['currency_code']);
  $minimum_quantity = commerce_moa_default_quantity($role_name);
  $minimum_value = (float) commerce_moa_default_minimum($role_name);
  $maximum_value = (float) commerce_moa_default_maximum($role_name);

  $use_custom_currency_format = commerce_moa_currency_format($role_name);
  $minimum_value_error = commerce_moa_format_amount($minimum_value, $balance['currency_code'], $use_custom_currency_format);
  $maximum_value_error = commerce_moa_format_amount($maximum_value, $balance['currency_code'], $use_custom_currency_format);

  // Check access quantity.
  if (user_access('access quantity')) {
    if ($minimum_quantity > 0) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $form_state['order']);
      $order_wrapper->commerce_line_items;
      foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
        // Don't check quantity for shipping line item.
        $is_product = in_array($line_item_wrapper->type->value(), commerce_product_line_item_types());
        if ($is_product && intval($line_item_wrapper->quantity->value()) < $minimum_quantity) {
          form_set_error('order', t('This store requires minimum quantity order of !minimum_quantity per item.', ['!minimum_quantity' => $minimum_quantity]));
        }
      }
    }
  }
  // Check access minimum.
  if (user_access('access minimum')) {
    if ($minimum_value > 0 && $total < $minimum_value) {
      form_set_error('order', t('This store requires minimum order of !minimum_amount.', ['!minimum_amount' => $minimum_value_error]));
    }
  }
  // Check access maximum.
  if (user_access('access maximum')) {
    if ($maximum_value > 0 && $total > $maximum_value) {
      form_set_error('order', t('This store requires maximum order of !maximum_amount.', ['!maximum_amount' => $maximum_value_error]));
    }
  }
}

/**
 * Format amount.
 */
function commerce_moa_format_amount($amount, $currency_code, $use_custom_currency_format) {
  if ($use_custom_currency_format) {
    $currency = commerce_currency_load($currency_code);
    $result = number_format($amount, $currency['decimals'], $currency['decimal_separator'], $currency['thousands_separator']) . ' ' . $currency_code;
  }
  else {
    $result = commerce_currency_format($amount, $currency_code, NULL, FALSE);
  }

  return $result;
}


